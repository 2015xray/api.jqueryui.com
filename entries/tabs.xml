<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="tabs" namespace="fn" type="Widget" widgetnamespace="ui">
	<longdesc>
		
<p>Tabs are generally used to break content into multiple sections that can be swapped to save space, much like an accordion.</p>

<p>By default a tab widget will swap between tabbed sections onClick, but the events can be changed to onHover through an option. Tab content can be loaded via Ajax by setting an href on a tab.</p>

<p><em>NOTE: Tabs created dynamically using .tabs( "add", ... ) are given an id of ui-tabs-NUM, where NUM is an auto-incrementing id. If you use this naming convention for your own elements, you may encounter problems.</em></p>

==Events==

A series of events fire when interacting with a tabs interface:

* tabsselect, tabsload, tabsshow (in that order)
* tabsadd, tabsremove
* tabsenable, tabsdisable

Event binding example:

<pre><![CDATA[$('#example').bind('tabsselect', function(event, ui) {

    // Objects available in the function context:
    ui.tab     // anchor element of the selected (clicked) tab
    ui.panel   // element, that contains the selected/clicked tab contents
    ui.index   // zero-based index of the selected (clicked) tab

});]]></pre>

Note that if a handler for the tabsselect event returns false, the clicked tab will not become selected (useful for example if switching to the next tab requires a form validation).

== Ajax mode ==

Tabs supports loading tab content via Ajax in an unobtrusive manner.

The HTML you need is slightly different from the one that is used for static tabs: A list of links pointing to existing resources (from where the content gets loaded) and no additional containers at all (unobtrusive!). The containers' markup is going to be created on the fly:

<pre><![CDATA[
<div id="example">
     <ul>
         <li><a href="ahah_1.html"><span>Content 1</span></a></li>
         <li><a href="ahah_2.html"><span>Content 2</span></a></li>
         <li><a href="ahah_3.html"><span>Content 3</span></a></li>
     </ul>
</div>
]]></pre>

Obviously this degrades gracefully - the links, e.g. the content, will still be accessible with JavaScript disabled.

Note that if you wish to reuse an existing container, you
could do so by matching a title attribute and the container's id:

<pre><![CDATA[
<li><a href="hello/world.html" title="Todo Overview"> ... </a></li>
]]></pre>

and a container like:

<pre><![CDATA[
<div id="Todo_Overview"> ... </div>
]]></pre>

(Note how white space is replaced with an underscore)

This is useful if you want a human readable hash in the URL instead of
a cryptic generated one.

===Back button and bookmarking===

Tabs 2 already supported this functionality, although the history plugin needs a rewrite first (it doesn't support Safari 3 and is in general a little inflexible) before it can be build back into the tabs. It is planned and Klaus is working on it whenever he finds the time. Actual bugs in the UI Tabs plugin itself always have higher priority though.

==How to...==

===...retrieve the index of the currently selected tab===

<pre><![CDATA[var $tabs = $('#example').tabs();
var selected = $tabs.tabs('option', 'selected'); // => 0]]></pre>

===...open links in the current tab instead of leaving the page===

"Hijax" links after tab content has been loaded:

<pre><![CDATA[$('#example').tabs({
    load: function(event, ui) {
        $(ui.panel).delegate('a', 'click', function(event) {
            $(ui.panel).load(this.href);
            event.preventDefault();
        });
    }
});]]></pre>

===...select a tab from a text link instead of clicking a tab itself===

<pre><![CDATA[var $tabs = $('#example').tabs(); // first tab selected

$('#my-text-link').click(function() { // bind click event to link
    $tabs.tabs('select', 2); // switch to third tab
    return false;
});]]></pre>

===...prevent switching to the tab on click depending on form validation===

Returning false in the tabs select handler prevents the clicked tab from becoming selected.

<pre><![CDATA[$('#example').tabs({
    select: function(event, ui) {
        var isValid = ... // form validation returning true or false
        return isValid;
    }
});]]></pre>

===...immediately select a just added tab===

<pre><![CDATA[var $tabs = $('#example').tabs({
    add: function(event, ui) {
        $tabs.tabs('select', '#' + ui.panel.id);
    }
});]]></pre>

===...prevent a FOUC (Flash of Unstyled Content) before tabs are initialized===

Add the necessary classes to hide an inactive tab panel to the HTML right away - note that this will '''not''' degrade gracefully with JavaScript being disabled:

<pre><![CDATA[<div id="example" class="ui-tabs">
  ...
  <div id="a-tab-panel" class="ui-tabs-hide"> </div>
  ...
</div>]]></pre>

==Why does...==

===...my slider, Google Map, sIFR etc. not work when placed in a hidden (inactive) tab?===

Any component that requires some dimensional computation for its initialization won't work in a hidden tab, because the tab panel itself is hidden via <code>display: none</code> so that any elements inside won't report their actual width and height (0 in most browsers).

There's an easy workaround. Use the <em>off-left technique</em> for hiding inactive tab panels. E.g. in your style sheet replace the rule for the class selector ".ui-tabs .ui-tabs-hide" with

<pre><![CDATA[.ui-tabs .ui-tabs-hide {
    position: absolute;
    left: -10000px;
}]]></pre>

For Google maps you can also resize the map once the tab is displayed like this:

<pre><![CDATA[$('#example').bind('tabsshow', function(event, ui) {
    if (ui.panel.id == "map-tab") {
        resizeMap();
    }
});]]></pre>

resizeMap() will call Google Maps' checkResize() on the particular map.

	</longdesc>
	<created>1.0</created>
	<options>
		<option name="ajaxOptions" type="Options" default='null'>
			<desc>Additional Ajax options to consider when loading tab content (see $.ajax).</desc>
		</option>
		<option name="cache" type="Boolean" default='false'>
			<desc>Whether or not to cache remote tabs content, e.g. load only once or with every click. Cached content is being lazy loaded, e.g once and only once for the first click. Note that to prevent the actual Ajax requests from being cached by the browser you need to provide an extra cache: false flag to ajaxOptions.</desc>
		</option>
		<option name="collapsible" type="Boolean" default='false'>
			<desc>Set to true to allow an already selected tab to become unselected again upon reselection.</desc>
		</option>
		<option name="cookie" type="Object" default='null'>
			<desc>Store the latest selected tab in a cookie. The cookie is then used to determine the initially selected tab if the ''selected'' option is not defined. Requires [http://plugins.jquery.com/project/cookie cookie plugin], which can also be found in the development-bundle>external folder from the download builder. The object needs to have key/value pairs of the form the cookie plugin expects as options. Available options (example): &#123; expires: 7, path: '/', domain: 'jquery.com', secure: true &#125;. Since jQuery UI 1.7 it is also possible to define the cookie name being used via ''name'' property.</desc>
		</option>
		<option name="deselectable" type="Boolean" default='false'>
			<desc>deprecated in jQuery UI 1.7, use collapsible.</desc>
		</option>
		<option name="disabled" type="Boolean, Array&lt;Number>" default='false'>
			<desc>An array containing the position of the tabs (zero-based index) that should be disabled on initialization.</desc>
		</option>
		<option name="event" type="String" default='"click"'>
			<desc>The type of event to be used for selecting a tab.</desc>
		</option>
		<option name="fx" type="Options, Array&lt;Options>" default='null'>
			<desc>Enable animations for hiding and showing tab panels. The duration option can be a string representing one of the three predefined speeds ("slow", "normal", "fast") or the duration in milliseconds to run an animation (default is "normal").</desc>
		</option>
		<option name="idPrefix" type="String" default='"ui-tabs-"'>
			<desc>If the remote tab, its anchor element that is, has no title attribute to generate an id from, an id/fragment identifier is created from this prefix and a unique id returned by $.data(el), for example "ui-tabs-54".</desc>
		</option>
		<option name="panelTemplate" type="String" default='"&lt;div&gt;&lt;/div&gt;"'>
			<desc>HTML template from which a new tab panel is created in case of adding a tab with the add method or when creating a panel for a remote tab on the fly.</desc>
		</option>
		<option name="selected" type="Number" default='0'>
			<desc>Zero-based index of the tab to be selected on initialization. To set all tabs to unselected pass -1 as value.</desc>
		</option>
		<option name="spinner" type="String" default='"&lt;em&gt;Loading&amp;#8230;&lt;/em&gt;"'>
			<desc>The HTML content of this string is shown in a tab title while remote content is loading. Pass in empty string to deactivate that behavior. An span element must be present in the A tag of the title, for the spinner content to be visible.</desc>
		</option>
		<option name="tabTemplate" type="String" default='"&lt;li&gt;&lt;a href&#61;"#&#123;href&#125;"&gt;&lt;span&gt;#&#123;label&#125;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;"'>
			<desc>HTML template from which a new tab is created and added. The placeholders #&#123;href&#125; and #&#123;label&#125; are replaced with the url and tab label that are passed as arguments to the add method.</desc>
		</option>

	</options>
	<events>
		<event name="select" type="tabsselect">
			<desc>This event is triggered when clicking a tab.
</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="load" type="tabsload">
			<desc>This event is triggered after the content of a remote tab has been loaded.
</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="show" type="tabsshow">
			<desc>This event is triggered when a tab is shown.
</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="add" type="tabsadd">
			<desc>This event is triggered when a tab is added.
</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="remove" type="tabsremove">
			<desc>This event is triggered when a tab is removed.
</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="enable" type="tabsenable">
			<desc>This event is triggered when a tab is enabled.
</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="disable" type="tabsdisable">
			<desc>This event is triggered when a tab is disabled.
</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>

	</events>
	<methods>
		<method name="add">
			<desc>String</desc>
			<argument name="url" type="String">
				<desc></desc>
			</argument>
			<argument name="label" type="String">
				<desc></desc>
			</argument>
			<argument name="index" type="Number" optional="true">
				<desc></desc>
			</argument>
		</method>
		<method name="remove">
			<desc>Remove a tab. The second argument is the zero-based index of the tab to be removed. Instead of an index, the href of the tab may be passed.</desc>
			<argument name="index" type="Number, String">
				<desc></desc>
			</argument>
		</method>
		<method name="enable">
			<desc>Enable a disabled tab.  To enable more than one tab at once reset the disabled property like: <code>$('#example').tabs("option","disabled",[]);</code>. The second argument is the zero-based index of the tab to be enabled. Instead of an index, the href of the tab may be passed.</desc>
			<argument name="index" type="Number, String">
				<desc></desc>
			</argument>
		</method>
		<method name="disable">
			<desc>Disable a tab. The selected tab cannot be disabled. To disable more than one tab at once use: <code>$('#example').tabs("option","disabled", [1, 2, 3]);</code>  The second argument is the zero-based index of the tab to be disabled. Instead of an index, the href of the tab may be passed.</desc>
			<argument name="index" type="Number, String">
				<desc></desc>
			</argument>
		</method>
		<method name="select">
			<desc>Select a tab, as if it were clicked. The second argument is the zero-based index of the tab to be selected or the id selector of the panel the tab is associated with (the tab's href fragment identifier, e.g. hash, points to the panel's id).</desc>
			<argument name="index" type="Number, String">
				<desc></desc>
			</argument>
		</method>
		<method name="load">
			<desc>Reload the content of an Ajax tab programmatically. This method always loads the tab content from the remote location, even if cache is set to true. The second argument is the zero-based index of the tab to be reloaded. </desc>
			<argument name="index" type="Number">
				<desc></desc>
			</argument>
		</method>
		<method name="url">
			<desc>String</desc>
			<argument name="index" type="Number">
				<desc></desc>
			</argument>
			<argument name="url" type="String">
				<desc></desc>
			</argument>
		</method>
		<method name="length">
			<desc>Retrieve the number of tabs of the first matched tab pane.</desc>
		</method>
		<method name="abort">
			<desc>Terminate all running tab ajax requests and animations.</desc>
		</method>
		<method name="rotate">
			<desc>Boolean</desc>
			<argument name="ms" type="Number">
				<desc></desc>
			</argument>
			<argument name="continuing" type="Boolean" optional="true">
				<desc></desc>
			</argument>
		</method>

	</methods>
	<example>

		<desc>A simple jQuery UI Tabs.</desc>
		<code><![CDATA[$("#tabs").tabs();]]></code>
		<html><![CDATA[
<div id="tabs">
    <ul>
        <li><a href="#fragment-1"><span>One</span></a></li>
        <li><a href="#fragment-2"><span>Two</span></a></li>
        <li><a href="#fragment-3"><span>Three</span></a></li>
    </ul>
    <div id="fragment-1">
        <p>First tab is active by default:</p>
        <pre><code>$('#example').tabs();</code></pre
    </div>
    <div id="fragment-2">
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
    </div>
    <div id="fragment-3">
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
    </div>
</div>
]]></html>

	</example>
	<category slug="widgets"/>
</entry>
