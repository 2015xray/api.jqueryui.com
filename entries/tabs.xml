<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="tabs" namespace="fn" type="Widget" widgetnamespace="ui">
	<desc>A single content area with multiple panels, each associated with a header in a list</desc>
	<longdesc>
		<p>Tabs are generally used to break content into multiple sections that can be swapped to save space, much like an accordion.</p>

		<p>By default a tab widget will swap between tabbed sections on click, but the events can be changed to onHover through an option. Tab content can be loaded via Ajax by setting an href on a tab.</p>

		<p>This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.</p>
	</longdesc>
	<created>1.0</created>
	<options>
		<option name="active" default='0'>
			<desc>
				The zero-based index of the panel that is active (open). A negative value select panels going backward from the last panel.
				<p>When collapsible is set to true, a false value closes the accordion, otherwise nothing happens</p>
			</desc>
			<type name="Boolean" />
			<type name="Number" />
		</option>
		<option name="collapsible" default='false'>
			<desc>Allow the active panel to be closed.</desc>
			<type name="Boolean" />
		</option>
		<option name="disabled" default='false'>
			<desc>An array containing the position of the tabs (zero-based index) that should be disabled.</desc>
			<type name="Boolean" />
			<type name="Array" />
		</option>
		<option name="event" type="String" default='"click"'>
			<desc>The type of event to be used for activating a tab. To activate on hover, use "mouseover".</desc>
			<type name="String" />
		</option>
		<option name="heightStyle" default="content">
			<desc>
				Controls the height of the tabs widget and each panel. Possible values:
				<ul>
					<li>auto: all panels will be set to the height of the tallest panel</li>
					<li>fill: expand to the available height based on the tabs's parent height</li>
					<li>content: each panel will be only as tall as its content</li>
				</ul>
			</desc>
			<type name="String" />
		</option>
		<option name="hide" default="true">
			<desc>How to hide a panel.</desc>
			<type name="Boolean" />
			<type name="Object" />
			<example>
				{
					effect: 'explode',
					delay: 250
				}
			</example>
		</option>
		<option name="show" default="true">
			<desc>How to show a panel.</desc>
			<type name="Boolean" />
			<type name="Object" />
			<example>
				{
					effect: 'slideDown',
					delay: 250
				}
			</example>
		</option>
	</options>
	<events>
		<event name="create">
			<desc>
				This event is triggered when the tabs widget is created.
			</desc>
			<argument name="event" type="Event">
			</argument>
			<argument name="ui" type="Object">
			</argument>
		</event>
		<event name="select" type="tabsselect">
			<desc>This event is triggered when clicking a tab.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="load" type="tabsload">
			<desc>This event is triggered after the content of a remote tab has been loaded.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="show" type="tabsshow">
			<desc>This event is triggered when a tab is shown.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="add" type="tabsadd">
			<desc>This event is triggered when a tab is added.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="remove" type="tabsremove">
			<desc>This event is triggered when a tab is removed.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="enable" type="tabsenable">
			<desc>This event is triggered when a tab is enabled.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="disable" type="tabsdisable">
			<desc>This event is triggered when a tab is disabled.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>

	</events>
	<methods>
		<method name="destroy">
			<desc>
				Remove the tabs functionality completely. This will return the element back to its pre-init state.
			</desc>
		</method>
		<method name="abort">
			<desc>Terminate all running tab ajax requests and animations.</desc>
		</method>
		<method name="add">
			<desc>String</desc>
			<argument name="url" type="String">
				<desc></desc>
			</argument>
			<argument name="label" type="String">
				<desc></desc>
			</argument>
			<argument name="index" type="Number" optional="true">
				<desc></desc>
			</argument>
		</method>
		<method name="disable">
			<desc>
				Disable the tabs widget.
			</desc>
		</method>
		<method name="disable">
			<desc>Disable a tab. The selected tab cannot be disabled. To disable more than one tab at once use: <code>$('#example').tabs("option","disabled", [1, 2, 3]);</code>  The second argument is the zero-based index of the tab to be disabled. Instead of an index, the href of the tab may be passed.</desc>
			<argument name="index" type="Number, String">
				<desc></desc>
			</argument>
		</method>
		<method name="enable">
			<desc>
				Enable the tabs widget.
			</desc>
		</method>
		<method name="enable">
			<desc>Enable a disabled tab.  To enable more than one tab at once reset the disabled property like: <code>$('#example').tabs("option","disabled",[]);</code>. The second argument is the zero-based index of the tab to be enabled. Instead of an index, the href of the tab may be passed.</desc>
			<argument name="index" type="Number, String">
				<desc></desc>
			</argument>
		</method>
		<method name="length">
			<desc>Retrieve the number of tabs of the first matched tab pane.</desc>
		</method>
		<method name="load">
			<desc>Reload the content of an Ajax tab programmatically. This method always loads the tab content from the remote location, even if cache is set to true. The second argument is the zero-based index of the tab to be reloaded. </desc>
			<argument name="index" type="Number">
				<desc></desc>
			</argument>
		</method>
		<method name="option">
			<desc>
				Get or set any tabs widget option. If no value is specified, will act as a getter.
			</desc>
			<argument name="optionName" type="String">
			</argument>
			<argument name="value" type="Object" optional="true">
			</argument>
		</method>
		<method name="option">
			<desc>
				Set multiple tabs widget options at once by providing an options object.
			</desc>
			<argument name="options" type="Object">
			</argument>
		</method>
		<method name="remove">
			<desc>Remove a tab. The second argument is the zero-based index of the tab to be removed. Instead of an index, the href of the tab may be passed.</desc>
			<argument name="index" type="Number, String">
				<desc></desc>
			</argument>
		</method>
		<method name="rotate">
			<desc>Boolean</desc>
			<argument name="ms" type="Number">
				<desc></desc>
			</argument>
			<argument name="continuing" type="Boolean" optional="true">
				<desc></desc>
			</argument>
		</method>
		<method name="select">
			<desc>Select a tab, as if it were clicked. The second argument is the zero-based index of the tab to be selected or the id selector of the panel the tab is associated with (the tab's href fragment identifier, e.g. hash, points to the panel's id).</desc>
			<argument name="index" type="Number, String">
				<desc></desc>
			</argument>
		</method>
		<method name="url">
			<desc>String</desc>
			<argument name="index" type="Number">
				<desc></desc>
			</argument>
			<argument name="url" type="String">
				<desc></desc>
			</argument>
		</method>
		<method name="widget">
			<desc>
				Returns the widget
			</desc>
		</method>
	</methods>
	<example>

		<desc>A simple jQuery UI Tabs.</desc>
		<code><![CDATA[$("#tabs").tabs();]]></code>
		<html><![CDATA[
<div id="tabs">
    <ul>
        <li><a href="#fragment-1"><span>One</span></a></li>
        <li><a href="#fragment-2"><span>Two</span></a></li>
        <li><a href="#fragment-3"><span>Three</span></a></li>
    </ul>
    <div id="fragment-1">
        <p>First tab is active by default:</p>
        <pre><code>$('#example').tabs();</code></pre
    </div>
    <div id="fragment-2">
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
    </div>
    <div id="fragment-3">
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
    </div>
</div>
]]></html>

	</example>
	<category slug="widgets"/>
</entry>
