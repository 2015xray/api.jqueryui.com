<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="resizable" namespace="fn" type="Widget" widgetnamespace="ui">
	<longdesc>
		
<p>The jQuery UI Resizable plugin makes selected elements resizable (meaning they have draggable resize handles). You can specify one or more handles as well as min and max width and height.</p>
<p>All callbacks (start,stop,resize) receive two arguments: The original browser event and a prepared ui object.  The ui object has the following fields:</p>
<ul>
<li><b>ui.helper</b> - a jQuery object containing the helper element</li>
<li><b>ui.originalPosition</b> - {top, left} before resizing started</li>
<li><b>ui.originalSize</b> - {width, height} before resizing started</li>
<li><b>ui.position</b> - {top, left} current position</li>
<li><b>ui.size</b> - {width, height} current size</li>
</ul>

	</longdesc>
	<created>1.0</created>
	<options>
		<option name="alsoResize" type="Selector, jQuery, Element" default='false'>
			<desc>Resize these elements synchronous when resizing.</desc>
		</option>
		<option name="animate" type="Boolean" default='false'>
			<desc>Animates to the final size after resizing.</desc>
		</option>
		<option name="animateDuration" type="Integer, String" default='"slow"'>
			<desc>Duration time for animating, in milliseconds. Other possible values: 'slow', 'normal', 'fast'.</desc>
		</option>
		<option name="animateEasing" type="String" default='"swing"'>
			<desc>Easing effect for animating.</desc>
		</option>
		<option name="aspectRatio" type="Boolean, Float" default='false'>
			<desc>If set to true, resizing is constrained by the original aspect ratio. Otherwise a custom aspect ratio can be specified, such as 9 / 16, or 0.5.</desc>
		</option>
		<option name="autoHide" type="Boolean" default='false'>
			<desc>If set to true, automatically hides the handles except when the mouse hovers over the element.</desc>
		</option>
		<option name="cancel" type="Selector" default='":input,option"'>
			<desc>Prevents resizing if you start on elements matching the selector.</desc>
		</option>
		<option name="containment" type="String, Element, Selector" default='false'>
			<desc>Constrains resizing to within the bounds of the specified element. Possible values: 'parent', 'document', a DOMElement, or a Selector.</desc>
		</option>
		<option name="delay" type="Integer" default='0'>
			<desc>Tolerance, in milliseconds, for when resizing should start. If specified, resizing will not start until after mouse is moved beyond duration. This can help prevent unintended resizing when clicking on an element.</desc>
		</option>
		<option name="disabled" type="Boolean" default="false">
			<desc>Disables the resizable if set to true.</desc>
		</option>
		<option name="distance" type="Integer" default='1'>
			<desc>Tolerance, in pixels, for when resizing should start. If specified, resizing will not start until after mouse is moved beyond distance. This can help prevent unintended resizing when clicking on an element.</desc>
		</option>
		<option name="ghost" type="Boolean" default='false'>
			<desc>If set to true, a semi-transparent helper element is shown for resizing.</desc>
		</option>
		<option name="grid" type="Array" default='false'>
			<desc>Snaps the resizing element to a grid, every x and y pixels. Array values: [x, y]</desc>
		</option>
		<option name="handles" type="String, Object" default='"e, s, se"'>
			<desc>If specified as a string, should be a comma-split list of any of the following: 'n, e, s, w, ne, se, sw, nw, all'. The necessary handles will be auto-generated by the plugin.

If specified as an object, the following keys are supported: { n, e, s, w, ne, se, sw, nw }. The value of any specified should be a jQuery selector matching the child element of the resizable to use as that handle. If the handle is not a child of the resizable, you can pass in the DOMElement or a valid jQuery object directly.</desc>
		</option>
		<option name="helper" type="String" default='false'>
			<desc>This is the css class that will be added to a proxy element to outline the resize during the drag of the resize handle. Once the resize is complete, the original element is sized.</desc>
		</option>
		<option name="maxHeight" type="Integer" default='null'>
			<desc>This is the maximum height the resizable should be allowed to resize to.</desc>
		</option>
		<option name="maxWidth" type="Integer" default='null'>
			<desc>This is the maximum width the resizable should be allowed to resize to.</desc>
		</option>
		<option name="minHeight" type="Integer" default='10'>
			<desc>This is the minimum height the resizable should be allowed to resize to.</desc>
		</option>
		<option name="minWidth" type="Integer" default='10'>
			<desc>This is the minimum width the resizable should be allowed to resize to.</desc>
		</option>

	</options>
	<events>
		<event name="start" type="resizestart">
			<desc>This event is triggered at the start of a resize operation.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="resize" type="resize">
			<desc>This event is triggered during the resize, on the drag of the resize handler.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
		<event name="stop" type="resizestop">
			<desc>This event is triggered at the end of a resize operation.</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>

	</events>
	<methods>


	</methods>
	<example>

		<desc>A simple jQuery UI Resizable.</desc>
		<inhead><![CDATA[<style type="text/css">
    #resizable { width: 100px; height: 100px; background: silver; }
  </style>]]></inhead>
		<code><![CDATA[$("#resizable").resizable();]]></code>
		<html><![CDATA[
<div id="resizable"></div>

]]></html>

	</example>
	<category slug="interactions"/>
</entry>
